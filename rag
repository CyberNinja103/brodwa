-- Emper made this btw join his server: https://discord.gg/UJ7YtqadPJ
-- let me know if it doesnt work and u found out the settings that does work
--[[ read me NOW!!!

this was leaked with permission from ShownApe aka the one who found the original limb reanimate (and also permission from kampachi who made the original code and gave me it, we love you kam)
this is a variant of the original method which works the same way

you might be wondering why it got leaked:
when someone found this variant it got given to someone, then someone else, then someone else... and so on (including me)
till it got in the hands of a skid (feariosz0) who thought it was a good idea to use it without permission in his hub to advertise it
and get popular from it
textbook definition of skid basically

also a h1 report (aka a vulnerability report) was already filed and sent to roblox
so this will get patched soon, have fun while you still can

also please keep in mind that this code was written by me but its a remake of kampaachi's code just done and written way better (no shade)
anything after this freshly added comment was made before and not after the leak,

have fun skids, while you still can,,, :smiling_imp:

]]

-- written by Emper
-- anyone who has the method can receive this code

-- whoever originally wrote it was trying to optimize it
-- so ill be doing that here
-- although you dont really need to optimize stuff thats
-- not done in loops
-- but ill be doing it anyway since thats what they were trying to do

do
	-- Settings:
	
	local DefaultAnimations = true -- doesnt work in velocity because it doesnt allow u to run localscripts
	local DisableCharacterCollisions = true
	local InstantRespawn = true
	local ParentCharacterToRig = false
	local RigTransparency = 1
	
	--
	
	local CFrameidentity = CFrame.identity
	local Inverse = CFrameidentity.Inverse
	local ToAxisAngle = CFrameidentity.ToAxisAngle
	local ToEulerAnglesXYZ = CFrameidentity.ToEulerAnglesXYZ
	local ToObjectSpace = CFrameidentity.ToObjectSpace
	
	local Connections = {}
	
	local Disconnect = nil
	
	local game = game
	local FindFirstChild = game.FindFirstChild
	local FindFirstChildOfClass = game.FindFirstChildOfClass
	local Players = FindFirstChildOfClass(game, "Players")
	local LocalPlayer = Players.LocalPlayer
	local Character = LocalPlayer.Character
	local CharacterAdded = LocalPlayer.CharacterAdded
	local Connect = CharacterAdded.Connect
	local Wait = CharacterAdded.Wait
	local Rig = Players:CreateHumanoidModelFromDescription(Players:GetHumanoidDescriptionFromUserId(LocalPlayer.UserId), Enum.HumanoidRigType.R6)
	local RigAnimate = Rig.Animate
	local RigHumanoid = Rig.Humanoid -- no need to do waitforchild here, its a safe index
	local RigRootPart = RigHumanoid.RootPart
	local RunService = FindFirstChildOfClass(game, "RunService")
	local Workspace = FindFirstChildOfClass(game, "Workspace")
	local GetDescendants = game.GetDescendants
	local IsA = game.IsA
	local WaitForChild = game.WaitForChild
	
	local BreakJoints = Instance.new("Model").BreakJoints
	
	local mathsin = math.sin

  local next = next
  
	local osclock = os.clock
	
	local replicatesignal = replicatesignal
	
	local RootPartCFrame = nil
	
	local Motor6Ds = {}
	
	local select = select
	
	local sethiddenproperty = sethiddenproperty
	
	local tableinsert = table.insert
	
	local Vector3 = Vector3
	local Vector3new = Vector3.new
	local Vector3zero = Vector3.zero
	
	RigAnimate.Enabled = false	
	
	Rig.Name = LocalPlayer.Name
	RigHumanoid.DisplayName = LocalPlayer.DisplayName -- if theres no display it will be just name so this is fine
	
	if Character then
		if replicatesignal then
			if InstantRespawn then
				replicatesignal(LocalPlayer.ConnectDiedSignalBackend)
				task.wait(Players.RespawnTime - 0.1)
				
				local RootPart = FindFirstChild(Character, "HumanoidRootPart")

				if RootPart then
					RootPartCFrame = RootPart.CFrame
				end
				
				replicatesignal(LocalPlayer.Kill)
			end
		else
			BreakJoints(Character)
		end
	end
	
	Character = Wait(CharacterAdded)
	
	local Animate = WaitForChild(Character, "Animate")
	Animate.Enabled = false

	local RootPart = WaitForChild(Character, "HumanoidRootPart")
	RigRootPart.CFrame = RootPartCFrame or RootPart.CFrame
	
	Disconnect = Connect(RigHumanoid.Died, function()
		for Index, Connection in Connections do
			Disconnect(Connection)
		end
		
		if ParentCharacterToRig then
			Character.Parent = Rig.Parent
		end
		
		BreakJoints(Character)
		Rig:Destroy()
	end).Disconnect
	
	for Index, Descendant in next, GetDescendants(Character) do
		if IsA(Descendant, "Motor6D") then
			Motor6Ds[Descendant] = {
				Part0 = Rig[Descendant.Part0.Name],
				Part1 = Rig[Descendant.Part1.Name]
			}
		end
	end
	
	for Index, Descendant in next, GetDescendants(Rig) do
		if IsA(Descendant, "BasePart") then
			Descendant.Transparency = RigTransparency
		end
	end
	
	Rig.Parent = Workspace
	
	if ParentCharacterToRig then
		Character.Parent = Rig
	end
	
	task.defer(function()
		local CurrentCamera = Workspace.CurrentCamera
		local CameraCFrame = CurrentCamera.CFrame
		
		LocalPlayer.Character = Rig
		CurrentCamera.CameraSubject = RigHumanoid
		
		Wait(RunService.PreRender)
		Workspace.CurrentCamera.CFrame = CameraCFrame
	end)
	
	tableinsert(Connections, Connect(RunService.PostSimulation, function()
		for Motor6D, Table in next, Motor6Ds do
			local Part0 = Table.Part0
			local Part1CFrame = Table.Part1.CFrame
			
			Motor6D.DesiredAngle = select(3, ToEulerAnglesXYZ(Part1CFrame, Part0.CFrame))
			
			local Delta = Inverse(Motor6D.C0) * ( Inverse(Part0.CFrame) *  Part1CFrame ) * Motor6D.C1
			local Axis, Angle = ToAxisAngle(Delta)
			
			sethiddenproperty(Motor6D, "ReplicateCurrentAngle6D", Axis * Angle)
			sethiddenproperty(Motor6D, "ReplicateCurrentOffset6D", Delta.Position)
		end
		
		RootPart.AssemblyAngularVelocity = Vector3zero
		RootPart.AssemblyLinearVelocity = Vector3zero
		RootPart.CFrame = RigRootPart.CFrame + Vector3new(0, mathsin(osclock() * 15) * 0.004, 0)
	end))
	
	tableinsert(Connections, Connect(RunService.PreSimulation, function()
		for Index, BasePart in next, GetDescendants(Rig) do
			if IsA(BasePart, "BasePart") then
				BasePart.CanCollide = false
			end
		end
		
		if DisableCharacterCollisions and not ParentCharacterToRig then
			for Index, BasePart in next, GetDescendants(Character) do
				if IsA(BasePart, "BasePart") then
					BasePart.CanCollide = false
				end
			end
		end
	end))
end
wait(3) -- idk so it wont break
getgenv().options = { -- SCRIPT OPTIONS
    RagdollGravity = 196.2 -- change to any number above 0 (196.2 is default grav)
}
local OxideApi = loadstring(game:HttpGet("https://raw.githubusercontent.com/Nitro-GT/Utils/refs/heads/main/OxideApi"))()
local ContextActionService = game:GetService("ContextActionService")
ContextActionService:BindAction("RagdollNoPush", function() OxideApi.Input.Press(Enum.KeyCode.T) end, true, Enum.KeyCode.ButtonY, Enum.KeyCode.ButtonY)
ContextActionService:SetTitle("RagdollNoPush", "RDoll No Push")
ContextActionService:BindAction("Ragdoll", function() OxideApi.Input.Press(Enum.KeyCode.R) end, true, Enum.KeyCode.ButtonY, Enum.KeyCode.ButtonY)
ContextActionService:SetTitle("Ragdoll", "Ragdoll")
ContextActionService:BindAction("fix", function() print("Esc Pressed") end, true, Enum.KeyCode.ButtonY, Enum.KeyCode.ButtonY)
ContextActionService:SetTitle("fix", "")
ContextActionService:SetPosition("Ragdoll",UDim2.new(-1.8, 0, 0.4, 0))
ContextActionService:SetPosition("RagdollNoPush",UDim2.new(-1.8, 0, 0.1, 0))
ContextActionService:SetPosition("fix",UDim2.new(6.06, 0, 0.1, 0))
local ograv = workspace.Gravity
local Character: Model = game.Players.LocalPlayer.Character
local Torso: BasePart = Character:WaitForChild("Torso")
local Humanoid: Humanoid = Character:FindFirstChildOfClass("Humanoid")
--> Necessary for Ragdolling to function properly
Character.Humanoid.BreakJointsOnDeath = false
Character.Humanoid.RequiresNeck = true --> If your are having issues with your character randomly dying then set this to false
--> Specific CFrame's I made for the best looking Ragdoll
local attachmentCFrames = {
	["Neck"] = {CFrame.new(0, 1* Character:GetScale(), 0, 0, -1, 0, 1, 0, -0, 0, 0, 1) , CFrame.new(0, -0.5* Character:GetScale(), 0, 0, -1, 0, 1, 0, -0, 0, 0, 1)},
	["Left Shoulder"] = {CFrame.new(-1.3* Character:GetScale(), 0.75* Character:GetScale(), 0, -1, 0, 0, 0, -1, 0, 0, 0, 1), CFrame.new(0.2* Character:GetScale(), 0.75* Character:GetScale(), 0, -1, 0, 0, 0, -1, 0, 0, 0, 1)},
	["Right Shoulder"] = {CFrame.new(1.3* Character:GetScale(), 0.75* Character:GetScale(), 0, 1, 0, 0, 0, 1, 0, 0, 0, 1), CFrame.new(-0.2* Character:GetScale(), 0.75* Character:GetScale(), 0, 1, 0, 0, 0, 1, 0, 0, 0, 1)},
	["Left Hip"] = {CFrame.new(-0.5* Character:GetScale(), -1* Character:GetScale(), 0, 0, 1, -0, -1, 0, 0, 0, 0, 1), CFrame.new(0, 1* Character:GetScale(), 0, 0, 1, -0, -1, 0, 0, 0, 0, 1)},
	["Right Hip"] = {CFrame.new(0.5* Character:GetScale(), -1* Character:GetScale(), 0, 0, 1, -0, -1, 0, 0, 0, 0, 1), CFrame.new(0, 1* Character:GetScale(), 0, 0, 1, -0, -1, 0, 0, 0, 0, 1)},
}
local ragdollInstanceNames = {
	["RagdollAttachment"] = true,
	["RagdollConstraint"] = true,
	["ColliderPart"] = true,
}
--> Used to trigger Ragdoll
local RagdollValue = Instance.new("BoolValue")
RagdollValue.Name = "IsRagdoll"
RagdollValue.Parent = Character
--> Used for anticheats to prevent flying Ragdolls from getting flagged, might be useful for you.
Character:SetAttribute("LastRag")
-------------------------------------------------------------------------------------------------
--> Allows for proper limb collisions
local function createColliderPart(part: BasePart)
	if not part then return end
	local rp = Instance.new("Part")
	rp.Name = "ColliderPart"
	rp.Size = part.Size/1.7
	rp.Massless = true			
	rp.CFrame = part.CFrame
	rp.Transparency = 1
	
	local wc = Instance.new("WeldConstraint")
	wc.Part0 = rp
	wc.Part1 = part
	
	wc.Parent = rp
	rp.Parent = part
end
--> Converts Motor6D's into BallSocketConstraints
function replaceJoints()
	for _, motor: Motor6D in pairs(Torso:GetDescendants()) do
		if motor:IsA("Motor6D") then
			if not attachmentCFrames[motor.Name] then return end
			motor.Enabled = false;
			local a0, a1 = Instance.new("Attachment"), Instance.new("Attachment")
			a0.CFrame = attachmentCFrames[motor.Name][1]
			a1.CFrame = attachmentCFrames[motor.Name][2]
			a0.Name = "RagdollAttachment"
			a1.Name = "RagdollAttachment"
			createColliderPart(motor.Part1)
			local b = Instance.new("BallSocketConstraint")
			b.Attachment0 = a0
			b.Attachment1 = a1
			b.Name = "RagdollConstraint"
			
			b.Radius = 0.15
			b.LimitsEnabled = true
			b.TwistLimitsEnabled = false
			b.MaxFrictionTorque = 0
			b.Restitution = 0
			b.UpperAngle = 90
			b.TwistLowerAngle = -45
			b.TwistUpperAngle = 45
			if motor.Name == "Neck" then
				b.TwistLimitsEnabled = true
				b.UpperAngle = 45
				b.TwistLowerAngle = -70
				b.TwistUpperAngle = 70
			end
			
			a0.Parent = motor.Part0
			a1.Parent = motor.Part1
			b.Parent = motor.Parent
		end
	end
	
	Humanoid.AutoRotate = false --> Disabling AutoRotate prevents the Character rotating in first person or Shift-Lock
	Character:SetAttribute("LastRag", tick())
end
--> Destroys all Ragdoll made instances and re-enables the Motor6D's
function resetJoints()
	if Humanoid.Health < 1 then return end
	for _, instance in pairs(Character:GetDescendants()) do
		if ragdollInstanceNames[instance.Name] then
			instance:Destroy()
		end
		if instance:IsA("Motor6D") then
			instance.Enabled = true;
		end
	end
	
	Humanoid.AutoRotate = true
end
function Ragdoll(value: boolean)
	if value then  workspace.Gravity = options.RagdollGravity replaceJoints() else  workspace.Gravity = ograv resetJoints() end
end
-------------------------------------------------------------------------------------------------
--> Connect the Events
RagdollValue.Changed:Connect(Ragdoll)
local Torso: BasePart = Character:WaitForChild("Torso")
local Humanoid: Humanoid = Character:WaitForChild("Humanoid")
local RagdollValue: BoolValue = Character:WaitForChild("IsRagdoll")

local function push()
	Torso:ApplyImpulse(Torso.CFrame.LookVector * (100 * (Character:GetScale()>1 and  Character:GetScale() or 1)))
end
local uis = game:GetService("UserInputService")
uis.InputBegan:Connect(function(k,chatting)
	if chatting then return end
if k.KeyCode == Enum.KeyCode.K then 
 RagdollValue.Value = not RagdollValue.Value
 push()
elseif k.KeyCode == Enum.KeyCode.Y then 
 RagdollValue.Value = not RagdollValue.Value
end
end)


RagdollValue:GetPropertyChangedSignal("Value"):Connect(function()
	if (Humanoid.Health == 0) then --> Prevents OOF sound from playing twice thanks to @robloxdestroyer1035
		Humanoid:SetStateEnabled(Enum.HumanoidStateType.GettingUp, false)
		return
	end
	
	if RagdollValue.Value then
		Humanoid:ChangeState(Enum.HumanoidStateType.Ragdoll)
		Humanoid:SetStateEnabled(Enum.HumanoidStateType.GettingUp, false)
	elseif not RagdollValue.Value then
		Humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
	end
end)
